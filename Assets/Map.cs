using System.Collections;
using System.Collections.Generic;
using UnityEngine;
using MapChildNodeGen;
using MapCityCenter;
using MapCitySide;
using MapGround;
using MapNode;

public class Map : MonoBehaviour {

    // X and Y size of map
    [SerializeField]
    private int x;
    [SerializeField]
    private int y;

    // Two dimentional array used to store the nodes generated by the corresponding size
    private Node[,] nodes;

    // Percentage of small buildings, medium buildings and big buildings
    [SerializeField]
    private int sBuildingsPer;  //Small Building Persentage
    [SerializeField]
    private int mBuildingsPer;
    [SerializeField]
    private int lBuildingsPer;

    // Amount of each building type to be spawned in the current map
    private int sBuildingsAm;
    private int mBuildingsAm;
    private int lBuildingsAm;

    // Objects used to generate appropriate objects in map
    private CityCenterGen cityCenterGen;
    private CitySideGen citySideGen;
    private GroundGen groundGen;

    // static transform of map (GameObject the script is attached to)
    public static Transform  mapTransform;

    // Return the amount of small buildings
    public int GetSBuildingsAm()
    {
        return sBuildingsAm;
    }

    // Return the amount of medium buildings
    public int GetMBuildingsAm()
    {
        return mBuildingsAm;
    }

    // Return the amount of large buildings
    public int GetLBuildingsAm()
    {
        return lBuildingsAm;
    }

    // Initialize Object, stracture of code excecution of each object
    private void Start()
    {
        mapTransform = transform;

        //UnityEditor.SceneView.FocusWindowIfItsOpen(typeof(UnityEditor.SceneView));
        nodes = new Node[x, y];

        sBuildingsAm = (x * y * sBuildingsPer) / 100;
        mBuildingsAm = (x * y * mBuildingsPer) / 100;
        lBuildingsAm = (x * y * lBuildingsPer) / 100;

        // Initialize nodes and set their corresponding naibors
        InitializeNodes();
        SetNaibors();

        // Set up city center and spawn medium buildings
        cityCenterGen = new CityCenterGen();
        cityCenterGen.Initialize();
        cityCenterGen.SetNodes(ref nodes);
        cityCenterGen.SetMediumBuilings(mBuildingsAm);
        cityCenterGen.SetLargeBuildings(lBuildingsAm);
        cityCenterGen.GenerateBuildings();

        // Set up city side and spawn small buildings
        citySideGen = new CitySideGen();
        citySideGen.Initialize();
        citySideGen.SetCitySideNodes(ref nodes);
        citySideGen.SetAmount(sBuildingsAm);
        citySideGen.GenerateBuildings();

        // Set up and spawn ground objects
        GroundGen groundGen = new GroundGen();
        groundGen.SetParentNodes(ref nodes);
        groundGen.SpawnGroundObj();
    }

    private void InitializeNodes()
    {
        int offset = 50;
        for(int x = 0; x < this.x; x++)
        {
            for(int y = 0; y < this.y; y++)
            {
                //Create empy game object
                GameObject node = new GameObject();
                node.AddComponent<MeshFilter>();
                node.AddComponent<MeshRenderer>();
                node.AddComponent<ChildNodeGen>();
                node.transform.position = new Vector3(offset * (x + 0.5f - (this.x) / 2), 0, offset * (y + 0.5f - this.y / 2));

                //Create node component for game object created
                Node nodeComp = node.AddComponent<Node>();
                nodeComp.Initialize();
                nodeComp.GenerateRotationPoint();

                //Add component to Array
                nodes[x,y] = nodeComp;
            }
        }
    }

    // Set naibors for each Node object
    private void SetNaibors()
    {
        for (int x = 0; x < this.x; x++)
        {
            for (int y = 0; y < this.y; y++)
            {
                nodes[x, y].SetNaibors(nodes, x, y, nodes.GetLength(0), nodes.GetLength(1));
            }
        }
    }

    // Draw spheres on each city center and city cide node (Used for testing) 
    private void OnDrawGizmos()
    {
        if (Application.isPlaying)
        {
            foreach (Node n in nodes)
            {
                Gizmos.color = Color.red;
                Gizmos.DrawSphere(n.transform.position, 5);
            }

            foreach(Node n in cityCenterGen.GetCityCenterNodes())
            {
                Gizmos.color = Color.yellow;
                Gizmos.DrawSphere(n.transform.position, 6);
            }

            if (Application.isPlaying)
            {
                foreach (Node n in citySideGen.citySideNodes)
                {
                    Gizmos.color = Color.blue;
                    Gizmos.DrawSphere(n.transform.position, 4);
                }
            }
        }
    }
}
